package br.com.zup.ecomerce.nicolle.model;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Positive;

import org.springframework.util.Assert;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.zup.ecomerce.nicolle.enums.GatewayPagamento;
import br.com.zup.ecomerce.nicolle.request.RetornoPagseguroRequest;

@Entity
public class Compra {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	
	@ManyToOne
	private @NotNull @Valid Produto produto;
	private @Positive int quantidade;
	
	@ManyToOne
	private @NotNull @Valid Usuario comprador;
	
	@Enumerated
	@NotNull
	private GatewayPagamento gatewayPagamento;
	@OneToMany(mappedBy = "compra", cascade = CascadeType.MERGE)
	private Set<Transacao> transacoes = new HashSet<>();

	public Compra(@NotNull @Valid Produto produtoParaCompra, @Positive int quantidade, 
			@NotNull @Valid Usuario comprador, GatewayPagamento gatewayPagamento) {
		this.produto = produtoParaCompra;
		this.quantidade = quantidade;
		this.comprador = comprador;
		this.gatewayPagamento = gatewayPagamento;
	}

	@Override
	public String toString() {
		return "Compra [id=" + id + ", produto=" + produto + ", quantidade=" + quantidade + ", comprador=" + comprador
				+ "]";
	}

	public Long getId() {
		return id;
	}

	public Produto getProduto() {
		return produto;
	}

	public int getQuantidade() {
		return quantidade;
	}

	public Usuario getComprador() {
		return comprador;
	}

	public GatewayPagamento getGatewayPagamento() {
		return gatewayPagamento;
	}

	public String urlRedirecionamento(UriComponentsBuilder builder) {
		
		return this.gatewayPagamento.criaUrlRetorno(this, builder);
	}

	public void tentativaPagamento(@Valid RetornoPagseguroRequest request) {
		Transacao nova = request.toTransacao();
		Assert.isTrue(!this.transacoes.contains(nova), "já existe uma transação como essa processada!");
		
		Set<Transacao> transacoesComSucesso = this.transacoes.stream()
				.filter(Transacao :: concluidaComSucesso).collect(Collectors.toSet());
		
		Assert.isTrue(transacoesComSucesso.isEmpty(), "Essa compra já foi concluida com sucesso!");
		
		this.transacoes.add(request.toTransacao());
		
	}
	
	

}
